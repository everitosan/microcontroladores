
Ejemplo9(Temperatura).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000558  000005ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800112  00800112  000005fe  2**0
                  ALLOC
  3 .stab         000019a4  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005ea  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002590  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac0  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f2  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061b  00000000  00000000  00003402  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00003a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000019f  00000000  00000000  00003b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000152  00000000  00000000  00003c9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 e5       	ldi	r30, 0x58	; 88
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 31       	cpi	r26, 0x12	; 18
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a2 e1       	ldi	r26, 0x12	; 18
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a8 31       	cpi	r26, 0x18	; 24
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	1c d0       	rcall	.+56     	; 0xa0 <main>
  68:	75 c2       	rjmp	.+1258   	; 0x554 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <adcinit>:
    }
}

void adcinit()
{
	ADMUX=0X40;
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=0X80;
  72:	80 e8       	ldi	r24, 0x80	; 128
  74:	80 93 7a 00 	sts	0x007A, r24
	
}
  78:	08 95       	ret

0000007a <readadc>:

int readadc(char canal)
{
	ADMUX=(ADMUX&0XF0)|canal; //selecion canal
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	90 81       	ld	r25, Z
  80:	90 7f       	andi	r25, 0xF0	; 240
  82:	89 2b       	or	r24, r25
  84:	80 83       	st	Z, r24
	ADCSRA= ADCSRA|(1<<ADSC); //inicia conv
  86:	ea e7       	ldi	r30, 0x7A	; 122
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	
	while((ADCSRA&(1<<4))==0); //espera a que se completa la conversion
  90:	80 81       	ld	r24, Z
  92:	84 ff       	sbrs	r24, 4
  94:	fd cf       	rjmp	.-6      	; 0x90 <readadc+0x16>
	return ADCW;
  96:	80 91 78 00 	lds	r24, 0x0078
  9a:	90 91 79 00 	lds	r25, 0x0079
		
  9e:	08 95       	ret

000000a0 <main>:
	vin=10mV
	vref=5v
	
	(vin*1024)/v=(.010*1024)/5=2.048
	*/
	DDRB=0x06;
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	84 b9       	out	0x04, r24	; 4
	adcinit();
  a4:	e3 df       	rcall	.-58     	; 0x6c <adcinit>
	lcd_init();
  a6:	8d d0       	rcall	.+282    	; 0x1c2 <lcd_init>
	
	lcd_gotoxy(3,0);
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	dc d0       	rcall	.+440    	; 0x266 <lcd_gotoxy>
	lcd_puts("Temperatura:");
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	ca d0       	rcall	.+404    	; 0x248 <lcd_puts>
    while(1)
    {
		
		
		num=readadc(5)/2.048;
        itoa(num,cad, 10 );
  b4:	c2 e1       	ldi	r28, 0x12	; 18
  b6:	d1 e0       	ldi	r29, 0x01	; 1
		
		lcd_gotoxy(5,1);
		lcd_puts("    ");
  b8:	0d e0       	ldi	r16, 0x0D	; 13
  ba:	11 e0       	ldi	r17, 0x01	; 1
		lcd_gotoxy(5,1);		
		lcd_puts(cad);		
		if(num<19)
			 PORTB=0x02;
			else if(num>22)
				PORTB=0x04;
  bc:	ee 24       	eor	r14, r14
  be:	68 94       	set
  c0:	e2 f8       	bld	r14, 2
		lcd_gotoxy(5,1);
		lcd_puts("    ");
		lcd_gotoxy(5,1);		
		lcd_puts(cad);		
		if(num<19)
			 PORTB=0x02;
  c2:	ff 24       	eor	r15, r15
  c4:	68 94       	set
  c6:	f1 f8       	bld	r15, 1
	
    while(1)
    {
		
		
		num=readadc(5)/2.048;
  c8:	85 e0       	ldi	r24, 0x05	; 5
  ca:	d7 df       	rcall	.-82     	; 0x7a <readadc>
  cc:	9c 01       	movw	r18, r24
  ce:	b9 01       	movw	r22, r18
  d0:	88 27       	eor	r24, r24
  d2:	77 fd       	sbrc	r23, 7
  d4:	80 95       	com	r24
  d6:	98 2f       	mov	r25, r24
  d8:	6e d1       	rcall	.+732    	; 0x3b6 <__floatsisf>
  da:	2f e6       	ldi	r18, 0x6F	; 111
  dc:	32 e1       	ldi	r19, 0x12	; 18
  de:	43 e0       	ldi	r20, 0x03	; 3
  e0:	50 e4       	ldi	r21, 0x40	; 64
  e2:	ce d0       	rcall	.+412    	; 0x280 <__divsf3>
  e4:	35 d1       	rcall	.+618    	; 0x350 <__fixsfsi>
  e6:	dc 01       	movw	r26, r24
  e8:	cb 01       	movw	r24, r22
  ea:	90 93 17 01 	sts	0x0117, r25
  ee:	80 93 16 01 	sts	0x0116, r24
        itoa(num,cad, 10 );
  f2:	be 01       	movw	r22, r28
  f4:	4a e0       	ldi	r20, 0x0A	; 10
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	ea d1       	rcall	.+980    	; 0x4ce <itoa>
		
		lcd_gotoxy(5,1);
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	b3 d0       	rcall	.+358    	; 0x266 <lcd_gotoxy>
		lcd_puts("    ");
 100:	c8 01       	movw	r24, r16
 102:	a2 d0       	rcall	.+324    	; 0x248 <lcd_puts>
		lcd_gotoxy(5,1);		
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	ae d0       	rcall	.+348    	; 0x266 <lcd_gotoxy>
		lcd_puts(cad);		
 10a:	ce 01       	movw	r24, r28
 10c:	9d d0       	rcall	.+314    	; 0x248 <lcd_puts>
		if(num<19)
 10e:	80 91 16 01 	lds	r24, 0x0116
 112:	90 91 17 01 	lds	r25, 0x0117
 116:	83 31       	cpi	r24, 0x13	; 19
 118:	91 05       	cpc	r25, r1
 11a:	14 f4       	brge	.+4      	; 0x120 <main+0x80>
			 PORTB=0x02;
 11c:	f5 b8       	out	0x05, r15	; 5
 11e:	06 c0       	rjmp	.+12     	; 0x12c <main+0x8c>
			else if(num>22)
 120:	87 31       	cpi	r24, 0x17	; 23
 122:	91 05       	cpc	r25, r1
 124:	14 f0       	brlt	.+4      	; 0x12a <main+0x8a>
				PORTB=0x04;
 126:	e5 b8       	out	0x05, r14	; 5
 128:	01 c0       	rjmp	.+2      	; 0x12c <main+0x8c>
				else
					PORTB=0x00;	
 12a:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	8f e7       	ldi	r24, 0x7F	; 127
 12e:	98 e3       	ldi	r25, 0x38	; 56
 130:	a1 e0       	ldi	r26, 0x01	; 1
 132:	81 50       	subi	r24, 0x01	; 1
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	a0 40       	sbci	r26, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x92>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x9c>
 13c:	00 00       	nop
 13e:	c4 cf       	rjmp	.-120    	; 0xc8 <main+0x28>

00000140 <lcd_nibble>:
	delay_ms(5);
}

void lcd_nibble(unsigned char nibble)
{
	LCD_RW_LOW;            
 140:	5a 98       	cbi	0x0b, 2	; 11
	
		if (SALIDA==0)
			LCD_PORT_DIR&=0X0F;
		else
			LCD_PORT_DIR|=0XF0;
 142:	9a b1       	in	r25, 0x0a	; 10
 144:	90 6f       	ori	r25, 0xF0	; 240
 146:	9a b9       	out	0x0a, r25	; 10
		LCD_PORT_WRITE=(nibble&0xF0)|(LCD_PORT_WRITE&0x0F);
 148:	9b b1       	in	r25, 0x0b	; 11
 14a:	80 7f       	andi	r24, 0xF0	; 240
 14c:	9f 70       	andi	r25, 0x0F	; 15
 14e:	98 2b       	or	r25, r24
 150:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_nibble+0x14>
		
	delay_us(2);
	LCD_E_HIGH;
 154:	5b 9a       	sbi	0x0b, 3	; 11
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_nibble+0x18>
	delay_us(2);
	LCD_E_LOW;	
 158:	5b 98       	cbi	0x0b, 3	; 11
}
 15a:	08 95       	ret

0000015c <lcd_read>:
}

char lcd_read(char rs)
{
	char alto,bajo;   
  	if (rs==0)
 15c:	88 23       	and	r24, r24
 15e:	11 f4       	brne	.+4      	; 0x164 <lcd_read+0x8>
   		LCD_RS_LOW;
 160:	59 98       	cbi	0x0b, 1	; 11
 162:	01 c0       	rjmp	.+2      	; 0x166 <lcd_read+0xa>
	else
		LCD_RS_HIGH;
 164:	59 9a       	sbi	0x0b, 1	; 11
    LCD_RW_HIGH;
 166:	5a 9a       	sbi	0x0b, 2	; 11
	
		if (ENTRADA==0)
			LCD_PORT_DIR&=0X0F;
 168:	8a b1       	in	r24, 0x0a	; 10
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	8a b9       	out	0x0a, r24	; 10
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_read+0x14>
		else
			LCD_PORT_DIR|=0XF0;			
		delay_us(2); 
	   	LCD_E_HIGH;  
 170:	5b 9a       	sbi	0x0b, 3	; 11
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_read+0x18>
	   	delay_us(2); 
	   	alto=LCD_PORT_READ;
 174:	89 b1       	in	r24, 0x09	; 9
	   	LCD_E_LOW;
 176:	5b 98       	cbi	0x0b, 3	; 11
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_read+0x1e>
	   	delay_us(2);
	   	LCD_E_HIGH;
 17a:	5b 9a       	sbi	0x0b, 3	; 11
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_read+0x22>
	   	delay_us(2);
	   	bajo = LCD_PORT_READ;
 17e:	99 b1       	in	r25, 0x09	; 9
	   	LCD_E_LOW;
 180:	5b 98       	cbi	0x0b, 3	; 11
		LCD_RW_LOW;
 182:	5a 98       	cbi	0x0b, 2	; 11
	   	return (alto&0xF0)|(bajo>>4);
 184:	92 95       	swap	r25
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	80 7f       	andi	r24, 0xF0	; 240
	  	   	
}
 18a:	89 2b       	or	r24, r25
 18c:	08 95       	ret

0000018e <lcd_write>:
	delay_us(2);
	LCD_E_LOW;	
}

void lcd_write(char inst, char rs)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	c8 2f       	mov	r28, r24
 194:	d6 2f       	mov	r29, r22
	while((lcd_read(0)==0x80));
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	e1 df       	rcall	.-62     	; 0x15c <lcd_read>
 19a:	80 38       	cpi	r24, 0x80	; 128
 19c:	e1 f3       	breq	.-8      	; 0x196 <lcd_write+0x8>
	if (rs==0)
 19e:	dd 23       	and	r29, r29
 1a0:	11 f4       	brne	.+4      	; 0x1a6 <lcd_write+0x18>
   		LCD_RS_LOW;
 1a2:	59 98       	cbi	0x0b, 1	; 11
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <lcd_write+0x1a>
	else
		LCD_RS_HIGH;
 1a6:	59 9a       	sbi	0x0b, 1	; 11
 1a8:	8d e0       	ldi	r24, 0x0D	; 13
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_write+0x1c>
 1ae:	00 00       	nop
   	delay_us(40);
   	lcd_nibble(inst);
 1b0:	8c 2f       	mov	r24, r28
 1b2:	c6 df       	rcall	.-116    	; 0x140 <lcd_nibble>
	
   		lcd_nibble(inst<<4);
 1b4:	8c 2f       	mov	r24, r28
 1b6:	82 95       	swap	r24
 1b8:	80 7f       	andi	r24, 0xF0	; 240
 1ba:	c2 df       	rcall	.-124    	; 0x140 <lcd_nibble>

}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <lcd_init>:
#include "lcd.h"

//Inicializa LCD
void lcd_init(void)
{
	LCD_E_DIR_OUT;
 1c2:	53 9a       	sbi	0x0a, 3	; 10
	LCD_RS_DIR_OUT;
 1c4:	51 9a       	sbi	0x0a, 1	; 10
	LCD_RW_DIR_OUT;	
 1c6:	52 9a       	sbi	0x0a, 2	; 10
	
	LCD_E_LOW;
 1c8:	5b 98       	cbi	0x0b, 3	; 11
	LCD_RS_LOW;
 1ca:	59 98       	cbi	0x0b, 1	; 11
	LCD_RW_LOW;	
 1cc:	5a 98       	cbi	0x0b, 2	; 11

		if (SALIDA==0)
			LCD_PORT_DIR&=0X0F;
		else
			LCD_PORT_DIR|=0XF0;
 1ce:	8a b1       	in	r24, 0x0a	; 10
 1d0:	80 6f       	ori	r24, 0xF0	; 240
 1d2:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	81 ef       	ldi	r24, 0xF1	; 241
 1d6:	9b e2       	ldi	r25, 0x2B	; 43
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x16>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init+0x1c>
 1de:	00 00       	nop
	
	delay_ms(45);
	lcd_nibble(LCD_RESET);
 1e0:	80 e3       	ldi	r24, 0x30	; 48
 1e2:	ae df       	rcall	.-164    	; 0x140 <lcd_nibble>
 1e4:	81 ee       	ldi	r24, 0xE1	; 225
 1e6:	94 e0       	ldi	r25, 0x04	; 4
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x26>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_init+0x2c>
 1ee:	00 00       	nop
   	delay_ms(5);         
   	lcd_nibble(LCD_RESET); 
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	a6 df       	rcall	.-180    	; 0x140 <lcd_nibble>
 1f4:	89 ef       	ldi	r24, 0xF9	; 249
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_init+0x36>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcd_init+0x3c>
 1fe:	00 00       	nop
   	delay_ms(1);         
   	lcd_nibble(LCD_RESET); 
 200:	80 e3       	ldi	r24, 0x30	; 48
 202:	9e df       	rcall	.-196    	; 0x140 <lcd_nibble>
 204:	89 ef       	ldi	r24, 0xF9	; 249
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_init+0x46>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <lcd_init+0x4c>
 20e:	00 00       	nop
	delay_ms(1);         
		
		lcd_nibble(LCD_4BITS); 
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	96 df       	rcall	.-212    	; 0x140 <lcd_nibble>
 214:	89 ef       	ldi	r24, 0xF9	; 249
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x56>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_init+0x5c>
 21e:	00 00       	nop
   		delay_ms(1);         
   		lcd_nibble(LCD_4BITS); 
 220:	80 e2       	ldi	r24, 0x20	; 32
 222:	8e df       	rcall	.-228    	; 0x140 <lcd_nibble>
   		lcd_nibble(LCD_SET_4BITS); 
 224:	80 ec       	ldi	r24, 0xC0	; 192
 226:	8c df       	rcall	.-232    	; 0x140 <lcd_nibble>
	   	
   	lcd_write(LCD_OFF_ON, 0);
 228:	8c e0       	ldi	r24, 0x0C	; 12
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	b0 df       	rcall	.-160    	; 0x18e <lcd_write>
   	lcd_write(LCD_CLEAR, 0);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	ad df       	rcall	.-166    	; 0x18e <lcd_write>
   	lcd_write(LCD_ENTRY_MODE, 0);
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	aa df       	rcall	.-172    	; 0x18e <lcd_write>
 23a:	81 ee       	ldi	r24, 0xE1	; 225
 23c:	94 e0       	ldi	r25, 0x04	; 4
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_init+0x7c>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_init+0x82>
 244:	00 00       	nop
	delay_ms(5);
}
 246:	08 95       	ret

00000248 <lcd_puts>:
	   	return (alto&0xF0)|(bajo>>4);
	  	   	
}

void lcd_puts(const char * s)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
	while(*s!=0)	
 24e:	88 81       	ld	r24, Y
 250:	88 23       	and	r24, r24
 252:	31 f0       	breq	.+12     	; 0x260 <lcd_puts+0x18>
		LCD_RW_LOW;
	   	return (alto&0xF0)|(bajo>>4);
	  	   	
}

void lcd_puts(const char * s)
 254:	21 96       	adiw	r28, 0x01	; 1
{
	while(*s!=0)	
		lcd_write(*s++, 1);	
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	9a df       	rcall	.-204    	; 0x18e <lcd_write>
	  	   	
}

void lcd_puts(const char * s)
{
	while(*s!=0)	
 25a:	89 91       	ld	r24, Y+
 25c:	88 23       	and	r24, r24
 25e:	d9 f7       	brne	.-10     	; 0x256 <lcd_puts+0xe>
		lcd_write(*s++, 1);	
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <lcd_gotoxy>:

void lcd_gotoxy(char x, char y)
{
	if(y==0)
 266:	66 23       	and	r22, r22
 268:	11 f4       	brne	.+4      	; 0x26e <lcd_gotoxy+0x8>
   		y = LCD_LINE1;
 26a:	90 e8       	ldi	r25, 0x80	; 128
 26c:	01 c0       	rjmp	.+2      	; 0x270 <lcd_gotoxy+0xa>
   	else
 	   	y = LCD_LINE2;
 26e:	90 ec       	ldi	r25, 0xC0	; 192
   	lcd_write(x+y, 0); 
 270:	89 0f       	add	r24, r25
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	8c df       	rcall	.-232    	; 0x18e <lcd_write>
}
 276:	08 95       	ret

00000278 <lcd_clear>:

void lcd_clear(void)
{
   lcd_write(LCD_CLEAR, 0);
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	88 df       	rcall	.-240    	; 0x18e <lcd_write>
}
 27e:	08 95       	ret

00000280 <__divsf3>:
 280:	0c d0       	rcall	.+24     	; 0x29a <__divsf3x>
 282:	eb c0       	rjmp	.+470    	; 0x45a <__fp_round>
 284:	e3 d0       	rcall	.+454    	; 0x44c <__fp_pscB>
 286:	40 f0       	brcs	.+16     	; 0x298 <__divsf3+0x18>
 288:	da d0       	rcall	.+436    	; 0x43e <__fp_pscA>
 28a:	30 f0       	brcs	.+12     	; 0x298 <__divsf3+0x18>
 28c:	21 f4       	brne	.+8      	; 0x296 <__divsf3+0x16>
 28e:	5f 3f       	cpi	r21, 0xFF	; 255
 290:	19 f0       	breq	.+6      	; 0x298 <__divsf3+0x18>
 292:	cc c0       	rjmp	.+408    	; 0x42c <__fp_inf>
 294:	51 11       	cpse	r21, r1
 296:	15 c1       	rjmp	.+554    	; 0x4c2 <__fp_szero>
 298:	cf c0       	rjmp	.+414    	; 0x438 <__fp_nan>

0000029a <__divsf3x>:
 29a:	f0 d0       	rcall	.+480    	; 0x47c <__fp_split3>
 29c:	98 f3       	brcs	.-26     	; 0x284 <__divsf3+0x4>

0000029e <__divsf3_pse>:
 29e:	99 23       	and	r25, r25
 2a0:	c9 f3       	breq	.-14     	; 0x294 <__divsf3+0x14>
 2a2:	55 23       	and	r21, r21
 2a4:	b1 f3       	breq	.-20     	; 0x292 <__divsf3+0x12>
 2a6:	95 1b       	sub	r25, r21
 2a8:	55 0b       	sbc	r21, r21
 2aa:	bb 27       	eor	r27, r27
 2ac:	aa 27       	eor	r26, r26
 2ae:	62 17       	cp	r22, r18
 2b0:	73 07       	cpc	r23, r19
 2b2:	84 07       	cpc	r24, r20
 2b4:	38 f0       	brcs	.+14     	; 0x2c4 <__divsf3_pse+0x26>
 2b6:	9f 5f       	subi	r25, 0xFF	; 255
 2b8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ba:	22 0f       	add	r18, r18
 2bc:	33 1f       	adc	r19, r19
 2be:	44 1f       	adc	r20, r20
 2c0:	aa 1f       	adc	r26, r26
 2c2:	a9 f3       	breq	.-22     	; 0x2ae <__divsf3_pse+0x10>
 2c4:	33 d0       	rcall	.+102    	; 0x32c <__stack+0x2d>
 2c6:	0e 2e       	mov	r0, r30
 2c8:	3a f0       	brmi	.+14     	; 0x2d8 <__divsf3_pse+0x3a>
 2ca:	e0 e8       	ldi	r30, 0x80	; 128
 2cc:	30 d0       	rcall	.+96     	; 0x32e <__stack+0x2f>
 2ce:	91 50       	subi	r25, 0x01	; 1
 2d0:	50 40       	sbci	r21, 0x00	; 0
 2d2:	e6 95       	lsr	r30
 2d4:	00 1c       	adc	r0, r0
 2d6:	ca f7       	brpl	.-14     	; 0x2ca <__divsf3_pse+0x2c>
 2d8:	29 d0       	rcall	.+82     	; 0x32c <__stack+0x2d>
 2da:	fe 2f       	mov	r31, r30
 2dc:	27 d0       	rcall	.+78     	; 0x32c <__stack+0x2d>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	bb 1f       	adc	r27, r27
 2e6:	26 17       	cp	r18, r22
 2e8:	37 07       	cpc	r19, r23
 2ea:	48 07       	cpc	r20, r24
 2ec:	ab 07       	cpc	r26, r27
 2ee:	b0 e8       	ldi	r27, 0x80	; 128
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <__divsf3_pse+0x56>
 2f2:	bb 0b       	sbc	r27, r27
 2f4:	80 2d       	mov	r24, r0
 2f6:	bf 01       	movw	r22, r30
 2f8:	ff 27       	eor	r31, r31
 2fa:	93 58       	subi	r25, 0x83	; 131
 2fc:	5f 4f       	sbci	r21, 0xFF	; 255
 2fe:	2a f0       	brmi	.+10     	; 0x30a <__stack+0xb>
 300:	9e 3f       	cpi	r25, 0xFE	; 254
 302:	51 05       	cpc	r21, r1
 304:	68 f0       	brcs	.+26     	; 0x320 <__stack+0x21>
 306:	92 c0       	rjmp	.+292    	; 0x42c <__fp_inf>
 308:	dc c0       	rjmp	.+440    	; 0x4c2 <__fp_szero>
 30a:	5f 3f       	cpi	r21, 0xFF	; 255
 30c:	ec f3       	brlt	.-6      	; 0x308 <__stack+0x9>
 30e:	98 3e       	cpi	r25, 0xE8	; 232
 310:	dc f3       	brlt	.-10     	; 0x308 <__stack+0x9>
 312:	86 95       	lsr	r24
 314:	77 95       	ror	r23
 316:	67 95       	ror	r22
 318:	b7 95       	ror	r27
 31a:	f7 95       	ror	r31
 31c:	9f 5f       	subi	r25, 0xFF	; 255
 31e:	c9 f7       	brne	.-14     	; 0x312 <__stack+0x13>
 320:	88 0f       	add	r24, r24
 322:	91 1d       	adc	r25, r1
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	97 f9       	bld	r25, 7
 32a:	08 95       	ret
 32c:	e1 e0       	ldi	r30, 0x01	; 1
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	88 1f       	adc	r24, r24
 334:	bb 1f       	adc	r27, r27
 336:	62 17       	cp	r22, r18
 338:	73 07       	cpc	r23, r19
 33a:	84 07       	cpc	r24, r20
 33c:	ba 07       	cpc	r27, r26
 33e:	20 f0       	brcs	.+8      	; 0x348 <__stack+0x49>
 340:	62 1b       	sub	r22, r18
 342:	73 0b       	sbc	r23, r19
 344:	84 0b       	sbc	r24, r20
 346:	ba 0b       	sbc	r27, r26
 348:	ee 1f       	adc	r30, r30
 34a:	88 f7       	brcc	.-30     	; 0x32e <__stack+0x2f>
 34c:	e0 95       	com	r30
 34e:	08 95       	ret

00000350 <__fixsfsi>:
 350:	04 d0       	rcall	.+8      	; 0x35a <__fixunssfsi>
 352:	68 94       	set
 354:	b1 11       	cpse	r27, r1
 356:	b5 c0       	rjmp	.+362    	; 0x4c2 <__fp_szero>
 358:	08 95       	ret

0000035a <__fixunssfsi>:
 35a:	98 d0       	rcall	.+304    	; 0x48c <__fp_splitA>
 35c:	88 f0       	brcs	.+34     	; 0x380 <__fixunssfsi+0x26>
 35e:	9f 57       	subi	r25, 0x7F	; 127
 360:	90 f0       	brcs	.+36     	; 0x386 <__fixunssfsi+0x2c>
 362:	b9 2f       	mov	r27, r25
 364:	99 27       	eor	r25, r25
 366:	b7 51       	subi	r27, 0x17	; 23
 368:	a0 f0       	brcs	.+40     	; 0x392 <__fixunssfsi+0x38>
 36a:	d1 f0       	breq	.+52     	; 0x3a0 <__fixunssfsi+0x46>
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	88 1f       	adc	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	1a f0       	brmi	.+6      	; 0x37c <__fixunssfsi+0x22>
 376:	ba 95       	dec	r27
 378:	c9 f7       	brne	.-14     	; 0x36c <__fixunssfsi+0x12>
 37a:	12 c0       	rjmp	.+36     	; 0x3a0 <__fixunssfsi+0x46>
 37c:	b1 30       	cpi	r27, 0x01	; 1
 37e:	81 f0       	breq	.+32     	; 0x3a0 <__fixunssfsi+0x46>
 380:	9f d0       	rcall	.+318    	; 0x4c0 <__fp_zero>
 382:	b1 e0       	ldi	r27, 0x01	; 1
 384:	08 95       	ret
 386:	9c c0       	rjmp	.+312    	; 0x4c0 <__fp_zero>
 388:	67 2f       	mov	r22, r23
 38a:	78 2f       	mov	r23, r24
 38c:	88 27       	eor	r24, r24
 38e:	b8 5f       	subi	r27, 0xF8	; 248
 390:	39 f0       	breq	.+14     	; 0x3a0 <__fixunssfsi+0x46>
 392:	b9 3f       	cpi	r27, 0xF9	; 249
 394:	cc f3       	brlt	.-14     	; 0x388 <__fixunssfsi+0x2e>
 396:	86 95       	lsr	r24
 398:	77 95       	ror	r23
 39a:	67 95       	ror	r22
 39c:	b3 95       	inc	r27
 39e:	d9 f7       	brne	.-10     	; 0x396 <__fixunssfsi+0x3c>
 3a0:	3e f4       	brtc	.+14     	; 0x3b0 <__fixunssfsi+0x56>
 3a2:	90 95       	com	r25
 3a4:	80 95       	com	r24
 3a6:	70 95       	com	r23
 3a8:	61 95       	neg	r22
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	08 95       	ret

000003b2 <__floatunsisf>:
 3b2:	e8 94       	clt
 3b4:	09 c0       	rjmp	.+18     	; 0x3c8 <__floatsisf+0x12>

000003b6 <__floatsisf>:
 3b6:	97 fb       	bst	r25, 7
 3b8:	3e f4       	brtc	.+14     	; 0x3c8 <__floatsisf+0x12>
 3ba:	90 95       	com	r25
 3bc:	80 95       	com	r24
 3be:	70 95       	com	r23
 3c0:	61 95       	neg	r22
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	8f 4f       	sbci	r24, 0xFF	; 255
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	99 23       	and	r25, r25
 3ca:	a9 f0       	breq	.+42     	; 0x3f6 <__floatsisf+0x40>
 3cc:	f9 2f       	mov	r31, r25
 3ce:	96 e9       	ldi	r25, 0x96	; 150
 3d0:	bb 27       	eor	r27, r27
 3d2:	93 95       	inc	r25
 3d4:	f6 95       	lsr	r31
 3d6:	87 95       	ror	r24
 3d8:	77 95       	ror	r23
 3da:	67 95       	ror	r22
 3dc:	b7 95       	ror	r27
 3de:	f1 11       	cpse	r31, r1
 3e0:	f8 cf       	rjmp	.-16     	; 0x3d2 <__floatsisf+0x1c>
 3e2:	fa f4       	brpl	.+62     	; 0x422 <__floatsisf+0x6c>
 3e4:	bb 0f       	add	r27, r27
 3e6:	11 f4       	brne	.+4      	; 0x3ec <__floatsisf+0x36>
 3e8:	60 ff       	sbrs	r22, 0
 3ea:	1b c0       	rjmp	.+54     	; 0x422 <__floatsisf+0x6c>
 3ec:	6f 5f       	subi	r22, 0xFF	; 255
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	8f 4f       	sbci	r24, 0xFF	; 255
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	16 c0       	rjmp	.+44     	; 0x422 <__floatsisf+0x6c>
 3f6:	88 23       	and	r24, r24
 3f8:	11 f0       	breq	.+4      	; 0x3fe <__floatsisf+0x48>
 3fa:	96 e9       	ldi	r25, 0x96	; 150
 3fc:	11 c0       	rjmp	.+34     	; 0x420 <__floatsisf+0x6a>
 3fe:	77 23       	and	r23, r23
 400:	21 f0       	breq	.+8      	; 0x40a <__floatsisf+0x54>
 402:	9e e8       	ldi	r25, 0x8E	; 142
 404:	87 2f       	mov	r24, r23
 406:	76 2f       	mov	r23, r22
 408:	05 c0       	rjmp	.+10     	; 0x414 <__floatsisf+0x5e>
 40a:	66 23       	and	r22, r22
 40c:	71 f0       	breq	.+28     	; 0x42a <__floatsisf+0x74>
 40e:	96 e8       	ldi	r25, 0x86	; 134
 410:	86 2f       	mov	r24, r22
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	2a f0       	brmi	.+10     	; 0x422 <__floatsisf+0x6c>
 418:	9a 95       	dec	r25
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	88 1f       	adc	r24, r24
 420:	da f7       	brpl	.-10     	; 0x418 <__floatsisf+0x62>
 422:	88 0f       	add	r24, r24
 424:	96 95       	lsr	r25
 426:	87 95       	ror	r24
 428:	97 f9       	bld	r25, 7
 42a:	08 95       	ret

0000042c <__fp_inf>:
 42c:	97 f9       	bld	r25, 7
 42e:	9f 67       	ori	r25, 0x7F	; 127
 430:	80 e8       	ldi	r24, 0x80	; 128
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	08 95       	ret

00000438 <__fp_nan>:
 438:	9f ef       	ldi	r25, 0xFF	; 255
 43a:	80 ec       	ldi	r24, 0xC0	; 192
 43c:	08 95       	ret

0000043e <__fp_pscA>:
 43e:	00 24       	eor	r0, r0
 440:	0a 94       	dec	r0
 442:	16 16       	cp	r1, r22
 444:	17 06       	cpc	r1, r23
 446:	18 06       	cpc	r1, r24
 448:	09 06       	cpc	r0, r25
 44a:	08 95       	ret

0000044c <__fp_pscB>:
 44c:	00 24       	eor	r0, r0
 44e:	0a 94       	dec	r0
 450:	12 16       	cp	r1, r18
 452:	13 06       	cpc	r1, r19
 454:	14 06       	cpc	r1, r20
 456:	05 06       	cpc	r0, r21
 458:	08 95       	ret

0000045a <__fp_round>:
 45a:	09 2e       	mov	r0, r25
 45c:	03 94       	inc	r0
 45e:	00 0c       	add	r0, r0
 460:	11 f4       	brne	.+4      	; 0x466 <__fp_round+0xc>
 462:	88 23       	and	r24, r24
 464:	52 f0       	brmi	.+20     	; 0x47a <__fp_round+0x20>
 466:	bb 0f       	add	r27, r27
 468:	40 f4       	brcc	.+16     	; 0x47a <__fp_round+0x20>
 46a:	bf 2b       	or	r27, r31
 46c:	11 f4       	brne	.+4      	; 0x472 <__fp_round+0x18>
 46e:	60 ff       	sbrs	r22, 0
 470:	04 c0       	rjmp	.+8      	; 0x47a <__fp_round+0x20>
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	8f 4f       	sbci	r24, 0xFF	; 255
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	08 95       	ret

0000047c <__fp_split3>:
 47c:	57 fd       	sbrc	r21, 7
 47e:	90 58       	subi	r25, 0x80	; 128
 480:	44 0f       	add	r20, r20
 482:	55 1f       	adc	r21, r21
 484:	59 f0       	breq	.+22     	; 0x49c <__fp_splitA+0x10>
 486:	5f 3f       	cpi	r21, 0xFF	; 255
 488:	71 f0       	breq	.+28     	; 0x4a6 <__fp_splitA+0x1a>
 48a:	47 95       	ror	r20

0000048c <__fp_splitA>:
 48c:	88 0f       	add	r24, r24
 48e:	97 fb       	bst	r25, 7
 490:	99 1f       	adc	r25, r25
 492:	61 f0       	breq	.+24     	; 0x4ac <__fp_splitA+0x20>
 494:	9f 3f       	cpi	r25, 0xFF	; 255
 496:	79 f0       	breq	.+30     	; 0x4b6 <__fp_splitA+0x2a>
 498:	87 95       	ror	r24
 49a:	08 95       	ret
 49c:	12 16       	cp	r1, r18
 49e:	13 06       	cpc	r1, r19
 4a0:	14 06       	cpc	r1, r20
 4a2:	55 1f       	adc	r21, r21
 4a4:	f2 cf       	rjmp	.-28     	; 0x48a <__fp_split3+0xe>
 4a6:	46 95       	lsr	r20
 4a8:	f1 df       	rcall	.-30     	; 0x48c <__fp_splitA>
 4aa:	08 c0       	rjmp	.+16     	; 0x4bc <__fp_splitA+0x30>
 4ac:	16 16       	cp	r1, r22
 4ae:	17 06       	cpc	r1, r23
 4b0:	18 06       	cpc	r1, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	f1 cf       	rjmp	.-30     	; 0x498 <__fp_splitA+0xc>
 4b6:	86 95       	lsr	r24
 4b8:	71 05       	cpc	r23, r1
 4ba:	61 05       	cpc	r22, r1
 4bc:	08 94       	sec
 4be:	08 95       	ret

000004c0 <__fp_zero>:
 4c0:	e8 94       	clt

000004c2 <__fp_szero>:
 4c2:	bb 27       	eor	r27, r27
 4c4:	66 27       	eor	r22, r22
 4c6:	77 27       	eor	r23, r23
 4c8:	cb 01       	movw	r24, r22
 4ca:	97 f9       	bld	r25, 7
 4cc:	08 95       	ret

000004ce <itoa>:
 4ce:	fb 01       	movw	r30, r22
 4d0:	9f 01       	movw	r18, r30
 4d2:	e8 94       	clt
 4d4:	42 30       	cpi	r20, 0x02	; 2
 4d6:	bc f0       	brlt	.+46     	; 0x506 <itoa+0x38>
 4d8:	45 32       	cpi	r20, 0x25	; 37
 4da:	ac f4       	brge	.+42     	; 0x506 <itoa+0x38>
 4dc:	4a 30       	cpi	r20, 0x0A	; 10
 4de:	29 f4       	brne	.+10     	; 0x4ea <itoa+0x1c>
 4e0:	97 fb       	bst	r25, 7
 4e2:	1e f4       	brtc	.+6      	; 0x4ea <itoa+0x1c>
 4e4:	90 95       	com	r25
 4e6:	81 95       	neg	r24
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	64 2f       	mov	r22, r20
 4ec:	77 27       	eor	r23, r23
 4ee:	1e d0       	rcall	.+60     	; 0x52c <__udivmodhi4>
 4f0:	80 5d       	subi	r24, 0xD0	; 208
 4f2:	8a 33       	cpi	r24, 0x3A	; 58
 4f4:	0c f0       	brlt	.+2      	; 0x4f8 <itoa+0x2a>
 4f6:	89 5d       	subi	r24, 0xD9	; 217
 4f8:	81 93       	st	Z+, r24
 4fa:	cb 01       	movw	r24, r22
 4fc:	00 97       	sbiw	r24, 0x00	; 0
 4fe:	a9 f7       	brne	.-22     	; 0x4ea <itoa+0x1c>
 500:	16 f4       	brtc	.+4      	; 0x506 <itoa+0x38>
 502:	5d e2       	ldi	r21, 0x2D	; 45
 504:	51 93       	st	Z+, r21
 506:	10 82       	st	Z, r1
 508:	c9 01       	movw	r24, r18
 50a:	00 c0       	rjmp	.+0      	; 0x50c <strrev>

0000050c <strrev>:
 50c:	dc 01       	movw	r26, r24
 50e:	fc 01       	movw	r30, r24
 510:	67 2f       	mov	r22, r23
 512:	71 91       	ld	r23, Z+
 514:	77 23       	and	r23, r23
 516:	e1 f7       	brne	.-8      	; 0x510 <strrev+0x4>
 518:	32 97       	sbiw	r30, 0x02	; 2
 51a:	04 c0       	rjmp	.+8      	; 0x524 <strrev+0x18>
 51c:	7c 91       	ld	r23, X
 51e:	6d 93       	st	X+, r22
 520:	70 83       	st	Z, r23
 522:	62 91       	ld	r22, -Z
 524:	ae 17       	cp	r26, r30
 526:	bf 07       	cpc	r27, r31
 528:	c8 f3       	brcs	.-14     	; 0x51c <strrev+0x10>
 52a:	08 95       	ret

0000052c <__udivmodhi4>:
 52c:	aa 1b       	sub	r26, r26
 52e:	bb 1b       	sub	r27, r27
 530:	51 e1       	ldi	r21, 0x11	; 17
 532:	07 c0       	rjmp	.+14     	; 0x542 <__udivmodhi4_ep>

00000534 <__udivmodhi4_loop>:
 534:	aa 1f       	adc	r26, r26
 536:	bb 1f       	adc	r27, r27
 538:	a6 17       	cp	r26, r22
 53a:	b7 07       	cpc	r27, r23
 53c:	10 f0       	brcs	.+4      	; 0x542 <__udivmodhi4_ep>
 53e:	a6 1b       	sub	r26, r22
 540:	b7 0b       	sbc	r27, r23

00000542 <__udivmodhi4_ep>:
 542:	88 1f       	adc	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	5a 95       	dec	r21
 548:	a9 f7       	brne	.-22     	; 0x534 <__udivmodhi4_loop>
 54a:	80 95       	com	r24
 54c:	90 95       	com	r25
 54e:	bc 01       	movw	r22, r24
 550:	cd 01       	movw	r24, r26
 552:	08 95       	ret

00000554 <_exit>:
 554:	f8 94       	cli

00000556 <__stop_program>:
 556:	ff cf       	rjmp	.-2      	; 0x556 <__stop_program>
