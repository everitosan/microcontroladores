
timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000422  000004b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800116  00800116  000004cc  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000f70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae7  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002cd  00000000  00000000  00001b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000637  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  0000241c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000017d  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020a  00000000  00000000  000026b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	1b c1       	rjmp	.+566    	; 0x252 <__vector_13>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e2       	ldi	r30, 0x22	; 34
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 31       	cpi	r26, 0x16	; 22
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a6 e1       	ldi	r26, 0x16	; 22
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	af 31       	cpi	r26, 0x1F	; 31
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	a2 d0       	rcall	.+324    	; 0x1ac <main>
  68:	da c1       	rjmp	.+948    	; 0x41e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <lcd_nibble>:
	delay_ms(5);
}

void lcd_nibble(unsigned char nibble)
{
	LCD_RW_LOW;            
  6c:	5a 98       	cbi	0x0b, 2	; 11
	
		if (SALIDA==0)
			LCD_PORT_DIR&=0X0F;
		else
			LCD_PORT_DIR|=0XF0;
  6e:	9a b1       	in	r25, 0x0a	; 10
  70:	90 6f       	ori	r25, 0xF0	; 240
  72:	9a b9       	out	0x0a, r25	; 10
		LCD_PORT_WRITE=(nibble&0xF0)|(LCD_PORT_WRITE&0x0F);
  74:	9b b1       	in	r25, 0x0b	; 11
  76:	80 7f       	andi	r24, 0xF0	; 240
  78:	9f 70       	andi	r25, 0x0F	; 15
  7a:	98 2b       	or	r25, r24
  7c:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	00 c0       	rjmp	.+0      	; 0x80 <lcd_nibble+0x14>
		
	delay_us(2);
	LCD_E_HIGH;
  80:	5b 9a       	sbi	0x0b, 3	; 11
  82:	00 c0       	rjmp	.+0      	; 0x84 <lcd_nibble+0x18>
	delay_us(2);
	LCD_E_LOW;	
  84:	5b 98       	cbi	0x0b, 3	; 11
}
  86:	08 95       	ret

00000088 <lcd_read>:
}

char lcd_read(char rs)
{
	char alto,bajo;   
  	if (rs==0)
  88:	88 23       	and	r24, r24
  8a:	11 f4       	brne	.+4      	; 0x90 <lcd_read+0x8>
   		LCD_RS_LOW;
  8c:	59 98       	cbi	0x0b, 1	; 11
  8e:	01 c0       	rjmp	.+2      	; 0x92 <lcd_read+0xa>
	else
		LCD_RS_HIGH;
  90:	59 9a       	sbi	0x0b, 1	; 11
    LCD_RW_HIGH;
  92:	5a 9a       	sbi	0x0b, 2	; 11
	
		if (ENTRADA==0)
			LCD_PORT_DIR&=0X0F;
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	8f 70       	andi	r24, 0x0F	; 15
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	00 c0       	rjmp	.+0      	; 0x9c <lcd_read+0x14>
		else
			LCD_PORT_DIR|=0XF0;			
		delay_us(2); 
	   	LCD_E_HIGH;  
  9c:	5b 9a       	sbi	0x0b, 3	; 11
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_read+0x18>
	   	delay_us(2); 
	   	alto=LCD_PORT_READ;
  a0:	89 b1       	in	r24, 0x09	; 9
	   	LCD_E_LOW;
  a2:	5b 98       	cbi	0x0b, 3	; 11
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcd_read+0x1e>
	   	delay_us(2);
	   	LCD_E_HIGH;
  a6:	5b 9a       	sbi	0x0b, 3	; 11
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_read+0x22>
	   	delay_us(2);
	   	bajo = LCD_PORT_READ;
  aa:	99 b1       	in	r25, 0x09	; 9
	   	LCD_E_LOW;
  ac:	5b 98       	cbi	0x0b, 3	; 11
		LCD_RW_LOW;
  ae:	5a 98       	cbi	0x0b, 2	; 11
	   	return (alto&0xF0)|(bajo>>4);
  b0:	92 95       	swap	r25
  b2:	9f 70       	andi	r25, 0x0F	; 15
  b4:	80 7f       	andi	r24, 0xF0	; 240
	  	   	
}
  b6:	89 2b       	or	r24, r25
  b8:	08 95       	ret

000000ba <lcd_write>:
	delay_us(2);
	LCD_E_LOW;	
}

void lcd_write(char inst, char rs)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	c8 2f       	mov	r28, r24
  c0:	d6 2f       	mov	r29, r22
	while((lcd_read(0)==0x80));
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	e1 df       	rcall	.-62     	; 0x88 <lcd_read>
  c6:	80 38       	cpi	r24, 0x80	; 128
  c8:	e1 f3       	breq	.-8      	; 0xc2 <lcd_write+0x8>
	if (rs==0)
  ca:	dd 23       	and	r29, r29
  cc:	11 f4       	brne	.+4      	; 0xd2 <lcd_write+0x18>
   		LCD_RS_LOW;
  ce:	59 98       	cbi	0x0b, 1	; 11
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <lcd_write+0x1a>
	else
		LCD_RS_HIGH;
  d2:	59 9a       	sbi	0x0b, 1	; 11
  d4:	8d e0       	ldi	r24, 0x0D	; 13
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_write+0x1c>
  da:	00 00       	nop
   	delay_us(40);
   	lcd_nibble(inst);
  dc:	8c 2f       	mov	r24, r28
  de:	c6 df       	rcall	.-116    	; 0x6c <lcd_nibble>
	
   		lcd_nibble(inst<<4);
  e0:	8c 2f       	mov	r24, r28
  e2:	82 95       	swap	r24
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	c2 df       	rcall	.-124    	; 0x6c <lcd_nibble>

}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <lcd_init>:
#include "lcd.h"

//Inicializa LCD
void lcd_init(void)
{
	LCD_E_DIR_OUT;
  ee:	53 9a       	sbi	0x0a, 3	; 10
	LCD_RS_DIR_OUT;
  f0:	51 9a       	sbi	0x0a, 1	; 10
	LCD_RW_DIR_OUT;	
  f2:	52 9a       	sbi	0x0a, 2	; 10
	
	LCD_E_LOW;
  f4:	5b 98       	cbi	0x0b, 3	; 11
	LCD_RS_LOW;
  f6:	59 98       	cbi	0x0b, 1	; 11
	LCD_RW_LOW;	
  f8:	5a 98       	cbi	0x0b, 2	; 11

		if (SALIDA==0)
			LCD_PORT_DIR&=0X0F;
		else
			LCD_PORT_DIR|=0XF0;
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	80 6f       	ori	r24, 0xF0	; 240
  fe:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	81 ef       	ldi	r24, 0xF1	; 241
 102:	9b e2       	ldi	r25, 0x2B	; 43
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_init+0x16>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_init+0x1c>
 10a:	00 00       	nop
	
	delay_ms(45);
	lcd_nibble(LCD_RESET);
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	ae df       	rcall	.-164    	; 0x6c <lcd_nibble>
 110:	81 ee       	ldi	r24, 0xE1	; 225
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_init+0x26>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_init+0x2c>
 11a:	00 00       	nop
   	delay_ms(5);         
   	lcd_nibble(LCD_RESET); 
 11c:	80 e3       	ldi	r24, 0x30	; 48
 11e:	a6 df       	rcall	.-180    	; 0x6c <lcd_nibble>
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_init+0x36>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_init+0x3c>
 12a:	00 00       	nop
   	delay_ms(1);         
   	lcd_nibble(LCD_RESET); 
 12c:	80 e3       	ldi	r24, 0x30	; 48
 12e:	9e df       	rcall	.-196    	; 0x6c <lcd_nibble>
 130:	89 ef       	ldi	r24, 0xF9	; 249
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_init+0x46>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_init+0x4c>
 13a:	00 00       	nop
	delay_ms(1);         
		
		lcd_nibble(LCD_4BITS); 
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	96 df       	rcall	.-212    	; 0x6c <lcd_nibble>
 140:	89 ef       	ldi	r24, 0xF9	; 249
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_init+0x56>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_init+0x5c>
 14a:	00 00       	nop
   		delay_ms(1);         
   		lcd_nibble(LCD_4BITS); 
 14c:	80 e2       	ldi	r24, 0x20	; 32
 14e:	8e df       	rcall	.-228    	; 0x6c <lcd_nibble>
   		lcd_nibble(LCD_SET_4BITS); 
 150:	80 ec       	ldi	r24, 0xC0	; 192
 152:	8c df       	rcall	.-232    	; 0x6c <lcd_nibble>
	   	
   	lcd_write(LCD_OFF_ON, 0);
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	b0 df       	rcall	.-160    	; 0xba <lcd_write>
   	lcd_write(LCD_CLEAR, 0);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	ad df       	rcall	.-166    	; 0xba <lcd_write>
   	lcd_write(LCD_ENTRY_MODE, 0);
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	aa df       	rcall	.-172    	; 0xba <lcd_write>
 166:	81 ee       	ldi	r24, 0xE1	; 225
 168:	94 e0       	ldi	r25, 0x04	; 4
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_init+0x7c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_init+0x82>
 170:	00 00       	nop
	delay_ms(5);
}
 172:	08 95       	ret

00000174 <lcd_puts>:
	   	return (alto&0xF0)|(bajo>>4);
	  	   	
}

void lcd_puts(const char * s)
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
	while(*s!=0)	
 17a:	88 81       	ld	r24, Y
 17c:	88 23       	and	r24, r24
 17e:	31 f0       	breq	.+12     	; 0x18c <lcd_puts+0x18>
		LCD_RW_LOW;
	   	return (alto&0xF0)|(bajo>>4);
	  	   	
}

void lcd_puts(const char * s)
 180:	21 96       	adiw	r28, 0x01	; 1
{
	while(*s!=0)	
		lcd_write(*s++, 1);	
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	9a df       	rcall	.-204    	; 0xba <lcd_write>
	  	   	
}

void lcd_puts(const char * s)
{
	while(*s!=0)	
 186:	89 91       	ld	r24, Y+
 188:	88 23       	and	r24, r24
 18a:	d9 f7       	brne	.-10     	; 0x182 <lcd_puts+0xe>
		lcd_write(*s++, 1);	
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <lcd_gotoxy>:

void lcd_gotoxy(char x, char y)
{
	if(y==0)
 192:	66 23       	and	r22, r22
 194:	11 f4       	brne	.+4      	; 0x19a <lcd_gotoxy+0x8>
   		y = LCD_LINE1;
 196:	90 e8       	ldi	r25, 0x80	; 128
 198:	01 c0       	rjmp	.+2      	; 0x19c <lcd_gotoxy+0xa>
   	else
 	   	y = LCD_LINE2;
 19a:	90 ec       	ldi	r25, 0xC0	; 192
   	lcd_write(x+y, 0); 
 19c:	89 0f       	add	r24, r25
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	8c df       	rcall	.-232    	; 0xba <lcd_write>
}
 1a2:	08 95       	ret

000001a4 <lcd_clear>:

void lcd_clear(void)
{
   lcd_write(LCD_CLEAR, 0);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	88 df       	rcall	.-240    	; 0xba <lcd_write>
}
 1aa:	08 95       	ret

000001ac <main>:
char h_C[3];
char m_C[3];
char s_C[3];

int main(void)
{	DDRB=0xff;
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	84 b9       	out	0x04, r24	; 4
	TCCR1A=0x00;
 1b0:	10 92 80 00 	sts	0x0080, r1
	TCNT1=65535-15625; // interrup cada 1 seg.
 1b4:	86 ef       	ldi	r24, 0xF6	; 246
 1b6:	92 ec       	ldi	r25, 0xC2	; 194
 1b8:	90 93 85 00 	sts	0x0085, r25
 1bc:	80 93 84 00 	sts	0x0084, r24
	TIMSK1=0x01;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B=0x03;
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	80 93 81 00 	sts	0x0081, r24
	
	lcd_init();
 1cc:	90 df       	rcall	.-224    	; 0xee <lcd_init>
	lcd_gotoxy(4,0);
 1ce:	84 e0       	ldi	r24, 0x04	; 4
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	df df       	rcall	.-66     	; 0x192 <lcd_gotoxy>
	lcd_puts("LA HORA ES:");
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	cd df       	rcall	.-102    	; 0x174 <lcd_puts>
	
	itoa(h,h_C,10);
 1da:	cc e1       	ldi	r28, 0x1C	; 28
 1dc:	d1 e0       	ldi	r29, 0x01	; 1
 1de:	80 91 14 01 	lds	r24, 0x0114
 1e2:	90 91 15 01 	lds	r25, 0x0115
 1e6:	be 01       	movw	r22, r28
 1e8:	4a e0       	ldi	r20, 0x0A	; 10
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	d5 d0       	rcall	.+426    	; 0x398 <itoa>
	itoa(m,m_C,10);
 1ee:	09 e1       	ldi	r16, 0x19	; 25
 1f0:	11 e0       	ldi	r17, 0x01	; 1
 1f2:	80 91 12 01 	lds	r24, 0x0112
 1f6:	90 91 13 01 	lds	r25, 0x0113
 1fa:	b8 01       	movw	r22, r16
 1fc:	4a e0       	ldi	r20, 0x0A	; 10
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	cb d0       	rcall	.+406    	; 0x398 <itoa>
	itoa(s,s_C,10);
 202:	0f 2e       	mov	r0, r31
 204:	f6 e1       	ldi	r31, 0x16	; 22
 206:	ef 2e       	mov	r14, r31
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	ff 2e       	mov	r15, r31
 20c:	f0 2d       	mov	r31, r0
 20e:	80 91 10 01 	lds	r24, 0x0110
 212:	90 91 11 01 	lds	r25, 0x0111
 216:	b7 01       	movw	r22, r14
 218:	4a e0       	ldi	r20, 0x0A	; 10
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	bd d0       	rcall	.+378    	; 0x398 <itoa>
	
	lcd_gotoxy(5,1);
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	b7 df       	rcall	.-146    	; 0x192 <lcd_gotoxy>
	lcd_puts(h_C);
 224:	ce 01       	movw	r24, r28
 226:	a6 df       	rcall	.-180    	; 0x174 <lcd_puts>
	lcd_puts(":");
 228:	cc e0       	ldi	r28, 0x0C	; 12
 22a:	d1 e0       	ldi	r29, 0x01	; 1
 22c:	ce 01       	movw	r24, r28
 22e:	a2 df       	rcall	.-188    	; 0x174 <lcd_puts>
	lcd_puts(m_C);
 230:	c8 01       	movw	r24, r16
 232:	a0 df       	rcall	.-192    	; 0x174 <lcd_puts>
	lcd_puts(":");
 234:	ce 01       	movw	r24, r28
 236:	9e df       	rcall	.-196    	; 0x174 <lcd_puts>
	lcd_puts(s_C);
 238:	c7 01       	movw	r24, r14
 23a:	9c df       	rcall	.-200    	; 0x174 <lcd_puts>
	
	sei(); // activan interrupciones globales;
 23c:	78 94       	sei
	
    while(1)
	{
		PORTB=~PORTB;
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	80 95       	com	r24
 242:	85 b9       	out	0x05, r24	; 5
 244:	8f e4       	ldi	r24, 0x4F	; 79
 246:	93 ec       	ldi	r25, 0xC3	; 195
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <main+0x9c>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0xa2>
 24e:	00 00       	nop
 250:	f6 cf       	rjmp	.-20     	; 0x23e <main+0x92>

00000252 <__vector_13>:
		_delay_ms(200);
	}
}

ISR(TIMER1_OVF_vect)
{	TCNT1=65535-15625; // interrp cada 1 seg.
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	2f 93       	push	r18
 25e:	3f 93       	push	r19
 260:	4f 93       	push	r20
 262:	5f 93       	push	r21
 264:	6f 93       	push	r22
 266:	7f 93       	push	r23
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
 26c:	af 93       	push	r26
 26e:	bf 93       	push	r27
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
 274:	86 ef       	ldi	r24, 0xF6	; 246
 276:	92 ec       	ldi	r25, 0xC2	; 194
 278:	90 93 85 00 	sts	0x0085, r25
 27c:	80 93 84 00 	sts	0x0084, r24
	
	s++;
 280:	80 91 10 01 	lds	r24, 0x0110
 284:	90 91 11 01 	lds	r25, 0x0111
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	90 93 11 01 	sts	0x0111, r25
 28e:	80 93 10 01 	sts	0x0110, r24
	if(s==60)
 292:	8c 33       	cpi	r24, 0x3C	; 60
 294:	91 05       	cpc	r25, r1
 296:	21 f5       	brne	.+72     	; 0x2e0 <__vector_13+0x8e>
	{
		s=0;
 298:	10 92 11 01 	sts	0x0111, r1
 29c:	10 92 10 01 	sts	0x0110, r1
		m++;
 2a0:	80 91 12 01 	lds	r24, 0x0112
 2a4:	90 91 13 01 	lds	r25, 0x0113
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	90 93 13 01 	sts	0x0113, r25
 2ae:	80 93 12 01 	sts	0x0112, r24
		if(m==60)
 2b2:	8c 33       	cpi	r24, 0x3C	; 60
 2b4:	91 05       	cpc	r25, r1
 2b6:	a1 f4       	brne	.+40     	; 0x2e0 <__vector_13+0x8e>
		{
			m=0;
 2b8:	10 92 13 01 	sts	0x0113, r1
 2bc:	10 92 12 01 	sts	0x0112, r1
			h++;
 2c0:	80 91 14 01 	lds	r24, 0x0114
 2c4:	90 91 15 01 	lds	r25, 0x0115
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	90 93 15 01 	sts	0x0115, r25
 2ce:	80 93 14 01 	sts	0x0114, r24
			if(h==24)
 2d2:	88 31       	cpi	r24, 0x18	; 24
 2d4:	91 05       	cpc	r25, r1
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <__vector_13+0x8e>
				h=0;
 2d8:	10 92 15 01 	sts	0x0115, r1
 2dc:	10 92 14 01 	sts	0x0114, r1
		}
	}
	
	itoa(h,h_C,10);
 2e0:	80 91 14 01 	lds	r24, 0x0114
 2e4:	90 91 15 01 	lds	r25, 0x0115
 2e8:	6c e1       	ldi	r22, 0x1C	; 28
 2ea:	71 e0       	ldi	r23, 0x01	; 1
 2ec:	4a e0       	ldi	r20, 0x0A	; 10
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	53 d0       	rcall	.+166    	; 0x398 <itoa>
	itoa(m,m_C,10);
 2f2:	80 91 12 01 	lds	r24, 0x0112
 2f6:	90 91 13 01 	lds	r25, 0x0113
 2fa:	69 e1       	ldi	r22, 0x19	; 25
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	4a e0       	ldi	r20, 0x0A	; 10
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	4a d0       	rcall	.+148    	; 0x398 <itoa>
	itoa(s,s_C,10);
 304:	80 91 10 01 	lds	r24, 0x0110
 308:	90 91 11 01 	lds	r25, 0x0111
 30c:	66 e1       	ldi	r22, 0x16	; 22
 30e:	71 e0       	ldi	r23, 0x01	; 1
 310:	4a e0       	ldi	r20, 0x0A	; 10
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	41 d0       	rcall	.+130    	; 0x398 <itoa>
	
	lcd_gotoxy(5,1);
 316:	85 e0       	ldi	r24, 0x05	; 5
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	3b df       	rcall	.-394    	; 0x192 <lcd_gotoxy>
	if(h<10)
 31c:	80 91 14 01 	lds	r24, 0x0114
 320:	90 91 15 01 	lds	r25, 0x0115
 324:	8a 30       	cpi	r24, 0x0A	; 10
 326:	91 05       	cpc	r25, r1
 328:	1c f4       	brge	.+6      	; 0x330 <__stack+0x31>
		lcd_puts("0");
 32a:	8e e0       	ldi	r24, 0x0E	; 14
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	22 df       	rcall	.-444    	; 0x174 <lcd_puts>
	lcd_puts(h_C);
 330:	8c e1       	ldi	r24, 0x1C	; 28
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	1f df       	rcall	.-450    	; 0x174 <lcd_puts>
	lcd_puts(":");
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	1c df       	rcall	.-456    	; 0x174 <lcd_puts>
	if(m<10)
 33c:	80 91 12 01 	lds	r24, 0x0112
 340:	90 91 13 01 	lds	r25, 0x0113
 344:	8a 30       	cpi	r24, 0x0A	; 10
 346:	91 05       	cpc	r25, r1
 348:	1c f4       	brge	.+6      	; 0x350 <__stack+0x51>
		lcd_puts("0");
 34a:	8e e0       	ldi	r24, 0x0E	; 14
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	12 df       	rcall	.-476    	; 0x174 <lcd_puts>
	lcd_puts(m_C);
 350:	89 e1       	ldi	r24, 0x19	; 25
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0f df       	rcall	.-482    	; 0x174 <lcd_puts>
	lcd_puts(":");
 356:	8c e0       	ldi	r24, 0x0C	; 12
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0c df       	rcall	.-488    	; 0x174 <lcd_puts>
	if(s<10)
 35c:	80 91 10 01 	lds	r24, 0x0110
 360:	90 91 11 01 	lds	r25, 0x0111
 364:	8a 30       	cpi	r24, 0x0A	; 10
 366:	91 05       	cpc	r25, r1
 368:	1c f4       	brge	.+6      	; 0x370 <__stack+0x71>
		lcd_puts("0");
 36a:	8e e0       	ldi	r24, 0x0E	; 14
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	02 df       	rcall	.-508    	; 0x174 <lcd_puts>
	lcd_puts(s_C);
 370:	86 e1       	ldi	r24, 0x16	; 22
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	ff de       	rcall	.-514    	; 0x174 <lcd_puts>
	
}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	bf 91       	pop	r27
 37c:	af 91       	pop	r26
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	7f 91       	pop	r23
 384:	6f 91       	pop	r22
 386:	5f 91       	pop	r21
 388:	4f 91       	pop	r20
 38a:	3f 91       	pop	r19
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <itoa>:
 398:	fb 01       	movw	r30, r22
 39a:	9f 01       	movw	r18, r30
 39c:	e8 94       	clt
 39e:	42 30       	cpi	r20, 0x02	; 2
 3a0:	bc f0       	brlt	.+46     	; 0x3d0 <itoa+0x38>
 3a2:	45 32       	cpi	r20, 0x25	; 37
 3a4:	ac f4       	brge	.+42     	; 0x3d0 <itoa+0x38>
 3a6:	4a 30       	cpi	r20, 0x0A	; 10
 3a8:	29 f4       	brne	.+10     	; 0x3b4 <itoa+0x1c>
 3aa:	97 fb       	bst	r25, 7
 3ac:	1e f4       	brtc	.+6      	; 0x3b4 <itoa+0x1c>
 3ae:	90 95       	com	r25
 3b0:	81 95       	neg	r24
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	64 2f       	mov	r22, r20
 3b6:	77 27       	eor	r23, r23
 3b8:	1e d0       	rcall	.+60     	; 0x3f6 <__udivmodhi4>
 3ba:	80 5d       	subi	r24, 0xD0	; 208
 3bc:	8a 33       	cpi	r24, 0x3A	; 58
 3be:	0c f0       	brlt	.+2      	; 0x3c2 <itoa+0x2a>
 3c0:	89 5d       	subi	r24, 0xD9	; 217
 3c2:	81 93       	st	Z+, r24
 3c4:	cb 01       	movw	r24, r22
 3c6:	00 97       	sbiw	r24, 0x00	; 0
 3c8:	a9 f7       	brne	.-22     	; 0x3b4 <itoa+0x1c>
 3ca:	16 f4       	brtc	.+4      	; 0x3d0 <itoa+0x38>
 3cc:	5d e2       	ldi	r21, 0x2D	; 45
 3ce:	51 93       	st	Z+, r21
 3d0:	10 82       	st	Z, r1
 3d2:	c9 01       	movw	r24, r18
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <strrev>

000003d6 <strrev>:
 3d6:	dc 01       	movw	r26, r24
 3d8:	fc 01       	movw	r30, r24
 3da:	67 2f       	mov	r22, r23
 3dc:	71 91       	ld	r23, Z+
 3de:	77 23       	and	r23, r23
 3e0:	e1 f7       	brne	.-8      	; 0x3da <strrev+0x4>
 3e2:	32 97       	sbiw	r30, 0x02	; 2
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <strrev+0x18>
 3e6:	7c 91       	ld	r23, X
 3e8:	6d 93       	st	X+, r22
 3ea:	70 83       	st	Z, r23
 3ec:	62 91       	ld	r22, -Z
 3ee:	ae 17       	cp	r26, r30
 3f0:	bf 07       	cpc	r27, r31
 3f2:	c8 f3       	brcs	.-14     	; 0x3e6 <strrev+0x10>
 3f4:	08 95       	ret

000003f6 <__udivmodhi4>:
 3f6:	aa 1b       	sub	r26, r26
 3f8:	bb 1b       	sub	r27, r27
 3fa:	51 e1       	ldi	r21, 0x11	; 17
 3fc:	07 c0       	rjmp	.+14     	; 0x40c <__udivmodhi4_ep>

000003fe <__udivmodhi4_loop>:
 3fe:	aa 1f       	adc	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	a6 17       	cp	r26, r22
 404:	b7 07       	cpc	r27, r23
 406:	10 f0       	brcs	.+4      	; 0x40c <__udivmodhi4_ep>
 408:	a6 1b       	sub	r26, r22
 40a:	b7 0b       	sbc	r27, r23

0000040c <__udivmodhi4_ep>:
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	5a 95       	dec	r21
 412:	a9 f7       	brne	.-22     	; 0x3fe <__udivmodhi4_loop>
 414:	80 95       	com	r24
 416:	90 95       	com	r25
 418:	bc 01       	movw	r22, r24
 41a:	cd 01       	movw	r24, r26
 41c:	08 95       	ret

0000041e <_exit>:
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>
