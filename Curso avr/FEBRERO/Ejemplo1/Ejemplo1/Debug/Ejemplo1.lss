
Ejemplo1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000be  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003fb  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012a  00000000  00000000  00000d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000332  00000000  00000000  00000e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ef  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee eb       	ldi	r30, 0xBE	; 190
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 30       	cpi	r26, 0x00	; 0
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	28 c0       	rjmp	.+80     	; 0xba <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	
	DDRB=0Xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 b9       	out	0x04, r24	; 4
	PORTB=0x01;
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	85 b9       	out	0x05, r24	; 5
  74:	0c c0       	rjmp	.+24     	; 0x8e <main+0x22>
    while(1)
    {
        while(PORTB!=0x80)
		{
			PORTB=PORTB<<1;
  76:	85 b1       	in	r24, 0x05	; 5
  78:	88 0f       	add	r24, r24
  7a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	8f e5       	ldi	r24, 0x5F	; 95
  7e:	9a ee       	ldi	r25, 0xEA	; 234
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	81 50       	subi	r24, 0x01	; 1
  84:	90 40       	sbci	r25, 0x00	; 0
  86:	a0 40       	sbci	r26, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
	
	DDRB=0Xff;
	PORTB=0x01;
    while(1)
    {
        while(PORTB!=0x80)
  8e:	85 b1       	in	r24, 0x05	; 5
  90:	80 38       	cpi	r24, 0x80	; 128
  92:	89 f7       	brne	.-30     	; 0x76 <main+0xa>
		{
			PORTB=PORTB<<1;
			_delay_ms(300);
		}		 
		while(PORTB!=0x01)
  94:	85 b1       	in	r24, 0x05	; 5
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	d1 f3       	breq	.-12     	; 0x8e <main+0x22>
		{
			PORTB=PORTB>>1;
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	86 95       	lsr	r24
  9e:	85 b9       	out	0x05, r24	; 5
  a0:	8f e5       	ldi	r24, 0x5F	; 95
  a2:	9a ee       	ldi	r25, 0xEA	; 234
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	81 50       	subi	r24, 0x01	; 1
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	a0 40       	sbci	r26, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
        while(PORTB!=0x80)
		{
			PORTB=PORTB<<1;
			_delay_ms(300);
		}		 
		while(PORTB!=0x01)
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	89 f7       	brne	.-30     	; 0x9a <main+0x2e>
  b8:	ea cf       	rjmp	.-44     	; 0x8e <main+0x22>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
