
vumetro_5_mar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001aa  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000900  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000426  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014d  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000351  00000000  00000000  00000ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000130  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 e3       	ldi	r30, 0x36	; 54
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a2 30       	cpi	r26, 0x02	; 2
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	1c d0       	rcall	.+56     	; 0xa0 <main>
  68:	64 c0       	rjmp	.+200    	; 0x132 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <ADC_init>:
    }
}

void ADC_init()
{
	ADMUX=0x40;
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=0x80;
  72:	80 e8       	ldi	r24, 0x80	; 128
  74:	80 93 7a 00 	sts	0x007A, r24
}
  78:	08 95       	ret

0000007a <READ_ADC>:
int READ_ADC(char canal)
{
	ADMUX=(ADMUX&0xf0)|canal; //selección canal
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	90 81       	ld	r25, Z
  80:	90 7f       	andi	r25, 0xF0	; 240
  82:	89 2b       	or	r24, r25
  84:	80 83       	st	Z, r24
	ADCSRA=ADCSRA|(1<<ADSC);// inicia conv
  86:	ea e7       	ldi	r30, 0x7A	; 122
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	while((ADCSRA&(1<<4))==0);//espera a que se complete conv.
  90:	80 81       	ld	r24, Z
  92:	84 ff       	sbrs	r24, 4
  94:	fd cf       	rjmp	.-6      	; 0x90 <READ_ADC+0x16>
	return ADCW; // devuelve el res. de conv.
  96:	80 91 78 00 	lds	r24, 0x0078
  9a:	90 91 79 00 	lds	r25, 0x0079
  9e:	08 95       	ret

000000a0 <main>:
int READ_ADC(char canal);

int res;

int main(void)
{	ADC_init();
  a0:	e5 df       	rcall	.-54     	; 0x6c <ADC_init>
	DDRB=0xff;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	84 b9       	out	0x04, r24	; 4
						else if(res<54)
								PORTB=0x3f;
							else if(res<63)
									PORTB=0x7f;
								else if(res<70)
										PORTB=0xff;
  a6:	cc 24       	eor	r12, r12
  a8:	ca 94       	dec	r12
					else if(res<45)
							PORTB=0x1f;
						else if(res<54)
								PORTB=0x3f;
							else if(res<63)
									PORTB=0x7f;
  aa:	0f 2e       	mov	r0, r31
  ac:	ff e7       	ldi	r31, 0x7F	; 127
  ae:	df 2e       	mov	r13, r31
  b0:	f0 2d       	mov	r31, r0
				else if(res<36)
						PORTB=0x0f;
					else if(res<45)
							PORTB=0x1f;
						else if(res<54)
								PORTB=0x3f;
  b2:	0f 2e       	mov	r0, r31
  b4:	ff e3       	ldi	r31, 0x3F	; 63
  b6:	ef 2e       	mov	r14, r31
  b8:	f0 2d       	mov	r31, r0
			else if(res<27)
					PORTB=0x07;
				else if(res<36)
						PORTB=0x0f;
					else if(res<45)
							PORTB=0x1f;
  ba:	0f 2e       	mov	r0, r31
  bc:	ff e1       	ldi	r31, 0x1F	; 31
  be:	ff 2e       	mov	r15, r31
  c0:	f0 2d       	mov	r31, r0
		else if(res<18)
				PORTB=0x03;
			else if(res<27)
					PORTB=0x07;
				else if(res<36)
						PORTB=0x0f;
  c2:	0f e0       	ldi	r16, 0x0F	; 15
		if(res<9)
			PORTB=0x01;
		else if(res<18)
				PORTB=0x03;
			else if(res<27)
					PORTB=0x07;
  c4:	17 e0       	ldi	r17, 0x07	; 7
    while(1)
    {	res=READ_ADC(2);
		if(res<9)
			PORTB=0x01;
		else if(res<18)
				PORTB=0x03;
  c6:	d3 e0       	ldi	r29, 0x03	; 3
{	ADC_init();
	DDRB=0xff;
    while(1)
    {	res=READ_ADC(2);
		if(res<9)
			PORTB=0x01;
  c8:	c1 e0       	ldi	r28, 0x01	; 1

int main(void)
{	ADC_init();
	DDRB=0xff;
    while(1)
    {	res=READ_ADC(2);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	d6 df       	rcall	.-84     	; 0x7a <READ_ADC>
  ce:	90 93 01 01 	sts	0x0101, r25
  d2:	80 93 00 01 	sts	0x0100, r24
		if(res<9)
  d6:	89 30       	cpi	r24, 0x09	; 9
  d8:	91 05       	cpc	r25, r1
  da:	14 f4       	brge	.+4      	; 0xe0 <main+0x40>
			PORTB=0x01;
  dc:	c5 b9       	out	0x05, r28	; 5
  de:	22 c0       	rjmp	.+68     	; 0x124 <main+0x84>
		else if(res<18)
  e0:	82 31       	cpi	r24, 0x12	; 18
  e2:	91 05       	cpc	r25, r1
  e4:	14 f4       	brge	.+4      	; 0xea <main+0x4a>
				PORTB=0x03;
  e6:	d5 b9       	out	0x05, r29	; 5
  e8:	1d c0       	rjmp	.+58     	; 0x124 <main+0x84>
			else if(res<27)
  ea:	8b 31       	cpi	r24, 0x1B	; 27
  ec:	91 05       	cpc	r25, r1
  ee:	14 f4       	brge	.+4      	; 0xf4 <main+0x54>
					PORTB=0x07;
  f0:	15 b9       	out	0x05, r17	; 5
  f2:	18 c0       	rjmp	.+48     	; 0x124 <main+0x84>
				else if(res<36)
  f4:	84 32       	cpi	r24, 0x24	; 36
  f6:	91 05       	cpc	r25, r1
  f8:	14 f4       	brge	.+4      	; 0xfe <main+0x5e>
						PORTB=0x0f;
  fa:	05 b9       	out	0x05, r16	; 5
  fc:	13 c0       	rjmp	.+38     	; 0x124 <main+0x84>
					else if(res<45)
  fe:	8d 32       	cpi	r24, 0x2D	; 45
 100:	91 05       	cpc	r25, r1
 102:	14 f4       	brge	.+4      	; 0x108 <main+0x68>
							PORTB=0x1f;
 104:	f5 b8       	out	0x05, r15	; 5
 106:	0e c0       	rjmp	.+28     	; 0x124 <main+0x84>
						else if(res<54)
 108:	86 33       	cpi	r24, 0x36	; 54
 10a:	91 05       	cpc	r25, r1
 10c:	14 f4       	brge	.+4      	; 0x112 <main+0x72>
								PORTB=0x3f;
 10e:	e5 b8       	out	0x05, r14	; 5
 110:	09 c0       	rjmp	.+18     	; 0x124 <main+0x84>
							else if(res<63)
 112:	8f 33       	cpi	r24, 0x3F	; 63
 114:	91 05       	cpc	r25, r1
 116:	14 f4       	brge	.+4      	; 0x11c <main+0x7c>
									PORTB=0x7f;
 118:	d5 b8       	out	0x05, r13	; 5
 11a:	04 c0       	rjmp	.+8      	; 0x124 <main+0x84>
								else if(res<70)
 11c:	86 34       	cpi	r24, 0x46	; 70
 11e:	91 05       	cpc	r25, r1
 120:	0c f4       	brge	.+2      	; 0x124 <main+0x84>
										PORTB=0xff;
 122:	c5 b8       	out	0x05, r12	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8d e2       	ldi	r24, 0x2D	; 45
 126:	92 e2       	ldi	r25, 0x22	; 34
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x88>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x8e>
 12e:	00 00       	nop
 130:	cc cf       	rjmp	.-104    	; 0xca <main+0x2a>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
