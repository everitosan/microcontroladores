
Ejemplo5.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000001d4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800148  00800148  000002b0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000051e  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000177  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038a  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000110  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e4 ed       	ldi	r30, 0xD4	; 212
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a8 34       	cpi	r26, 0x48	; 72
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a8 e4       	ldi	r26, 0x48	; 72
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a4 35       	cpi	r26, 0x54	; 84
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	b3 c0       	rjmp	.+358    	; 0x1d0 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
unsigned char letra=0;								 
unsigned char copia[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
unsigned char k=0;						 

int main(void)
{	DDRB=0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 b9       	out	0x04, r24	; 4
	DDRD=0xff;
  70:	8a b9       	out	0x0a, r24	; 10
	PORTD=0x80;// activada 1ra col
  72:	80 e8       	ldi	r24, 0x80	; 128
  74:	8b b9       	out	0x0b, r24	; 11
	{
		//for que copia y genera la nueva secuencia a mostrar
		for(i=0;i<8;i++)
		{
			if(i==7)
			copia[i]=mensaje[letra][indice];
  76:	0f 2e       	mov	r0, r31
  78:	fa e4       	ldi	r31, 0x4A	; 74
  7a:	af 2e       	mov	r10, r31
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	bf 2e       	mov	r11, r31
  80:	f0 2d       	mov	r31, r0
  82:	0f 2e       	mov	r0, r31
  84:	f0 e5       	ldi	r31, 0x50	; 80
  86:	ef 2e       	mov	r14, r31
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	ff 2e       	mov	r15, r31
  8c:	f0 2d       	mov	r31, r0
  8e:	0f 2e       	mov	r0, r31
  90:	f0 e3       	ldi	r31, 0x30	; 48
  92:	cf 2e       	mov	r12, r31
  94:	f1 e0       	ldi	r31, 0x01	; 1
  96:	df 2e       	mov	r13, r31
  98:	f0 2d       	mov	r31, r0
		//for que muestra
		for (i=0;i<10;i++)//numero de flasheos
		{
			for(k=0;k<8;k++)
			{
				PORTB=~copia[k];// manda los 8 bits de una columna
  9a:	29 e4       	ldi	r18, 0x49	; 73
  9c:	31 e0       	ldi	r19, 0x01	; 1
				_delay_ms(1);
				PORTD=PORTD>>1;//corrimiento del bit mas significatico, al bit mas significativo -1
			}
			PORTD=0x80;
  9e:	60 e8       	ldi	r22, 0x80	; 128
				{
					for(i=0;i<16;i++)//duracion de eve (flash)
					{
						for (k=0;k<8;k++)
						{	//barrido de columnas
							PORTB=~eve[letra][k];
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	51 e0       	ldi	r21, 0x01	; 1
	{
		//for que copia y genera la nueva secuencia a mostrar
		for(i=0;i<8;i++)
		{
			if(i==7)
			copia[i]=mensaje[letra][indice];
  a4:	c0 91 51 01 	lds	r28, 0x0151
  a8:	d0 e0       	ldi	r29, 0x00	; 0
  aa:	00 91 52 01 	lds	r16, 0x0152
  ae:	10 e0       	ldi	r17, 0x00	; 0
  b0:	d5 01       	movw	r26, r10
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	12 c0       	rjmp	.+36     	; 0xda <main+0x6e>
	while(1)
	{
		//for que copia y genera la nueva secuencia a mostrar
		for(i=0;i<8;i++)
		{
			if(i==7)
  b6:	87 30       	cpi	r24, 0x07	; 7
  b8:	81 f4       	brne	.+32     	; 0xda <main+0x6e>
			copia[i]=mensaje[letra][indice];
  ba:	ce 01       	movw	r24, r28
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	80 0f       	add	r24, r16
  ca:	91 1f       	adc	r25, r17
  cc:	8c 0d       	add	r24, r12
  ce:	9d 1d       	adc	r25, r13
  d0:	fc 01       	movw	r30, r24
  d2:	80 81       	ld	r24, Z
  d4:	f7 01       	movw	r30, r14
  d6:	80 83       	st	Z, r24
  d8:	08 c0       	rjmp	.+16     	; 0xea <main+0x7e>
			else
			copia[i]=copia[i+1];
  da:	9c 91       	ld	r25, X
unsigned char i;
unsigned char letra=0;								 
unsigned char copia[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
unsigned char k=0;						 

int main(void)
  dc:	fd 01       	movw	r30, r26
  de:	31 97       	sbiw	r30, 0x01	; 1
		for(i=0;i<8;i++)
		{
			if(i==7)
			copia[i]=mensaje[letra][indice];
			else
			copia[i]=copia[i+1];
  e0:	90 83       	st	Z, r25
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	11 96       	adiw	r26, 0x01	; 1
	
	
	while(1)
	{
		//for que copia y genera la nueva secuencia a mostrar
		for(i=0;i<8;i++)
  e6:	88 30       	cpi	r24, 0x08	; 8
  e8:	31 f7       	brne	.-52     	; 0xb6 <main+0x4a>
			copia[i]=copia[i+1];
			
		}

		//for que muestra
		for (i=0;i<10;i++)//numero de flasheos
  ea:	10 92 53 01 	sts	0x0153, r1
		{
			for(k=0;k<8;k++)
  ee:	10 92 48 01 	sts	0x0148, r1
  f2:	80 e0       	ldi	r24, 0x00	; 0
			{
				PORTB=~copia[k];// manda los 8 bits de una columna
  f4:	f9 01       	movw	r30, r18
  f6:	e8 0f       	add	r30, r24
  f8:	f1 1d       	adc	r31, r1
  fa:	80 81       	ld	r24, Z
  fc:	80 95       	com	r24
  fe:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	89 ef       	ldi	r24, 0xF9	; 249
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x98>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x9e>
 10a:	00 00       	nop
				_delay_ms(1);
				PORTD=PORTD>>1;//corrimiento del bit mas significatico, al bit mas significativo -1
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	86 95       	lsr	r24
 110:	8b b9       	out	0x0b, r24	; 11
		}

		//for que muestra
		for (i=0;i<10;i++)//numero de flasheos
		{
			for(k=0;k<8;k++)
 112:	80 91 48 01 	lds	r24, 0x0148
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 48 01 	sts	0x0148, r24
 11c:	88 30       	cpi	r24, 0x08	; 8
 11e:	50 f3       	brcs	.-44     	; 0xf4 <main+0x88>
			{
				PORTB=~copia[k];// manda los 8 bits de una columna
				_delay_ms(1);
				PORTD=PORTD>>1;//corrimiento del bit mas significatico, al bit mas significativo -1
			}
			PORTD=0x80;
 120:	6b b9       	out	0x0b, r22	; 11
			copia[i]=copia[i+1];
			
		}

		//for que muestra
		for (i=0;i<10;i++)//numero de flasheos
 122:	80 91 53 01 	lds	r24, 0x0153
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 53 01 	sts	0x0153, r24
 12c:	8a 30       	cpi	r24, 0x0A	; 10
 12e:	f8 f2       	brcs	.-66     	; 0xee <main+0x82>
			}
			PORTD=0x80;
		}

		// aumento del indice para mostrar una columna nueva for#1>else
		indice++;
 130:	80 91 52 01 	lds	r24, 0x0152
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 52 01 	sts	0x0152, r24
		if(indice==8)//si indice ==8 no hay un valor en mensaje[letra][8]
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	09 f0       	breq	.+2      	; 0x140 <main+0xd4>
 13e:	b2 cf       	rjmp	.-156    	; 0xa4 <main+0x38>
		{
			indice=0;//regresamos el indice para copiar la nueva letra desde el incio
 140:	10 92 52 01 	sts	0x0152, r1
			letra++;//cambiamos a la siguiente letra
 144:	80 91 51 01 	lds	r24, 0x0151
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 51 01 	sts	0x0151, r24
			if(letra==3)//si letra es ==2 no hay mensaje[2][x]
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	09 f0       	breq	.+2      	; 0x154 <main+0xe8>
 152:	a8 cf       	rjmp	.-176    	; 0xa4 <main+0x38>
			{
				letra=0;
 154:	10 92 51 01 	sts	0x0151, r1
				while(letra<6)
				{
					for(i=0;i<16;i++)//duracion de eve (flash)
 158:	10 92 53 01 	sts	0x0153, r1
					{
						for (k=0;k<8;k++)
 15c:	10 92 48 01 	sts	0x0148, r1
 160:	70 e0       	ldi	r23, 0x00	; 0
						{	//barrido de columnas
							PORTB=~eve[letra][k];
 162:	80 91 51 01 	lds	r24, 0x0151
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	87 0f       	add	r24, r23
 176:	91 1d       	adc	r25, r1
 178:	84 0f       	add	r24, r20
 17a:	95 1f       	adc	r25, r21
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	80 95       	com	r24
 182:	85 b9       	out	0x05, r24	; 5
 184:	83 ef       	ldi	r24, 0xF3	; 243
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x11c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x122>
 18e:	00 00       	nop
							_delay_ms(2);
							PORTD=PORTD>>1;
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	86 95       	lsr	r24
 194:	8b b9       	out	0x0b, r24	; 11
							copia[k]=0x00;
 196:	70 91 48 01 	lds	r23, 0x0148
 19a:	f9 01       	movw	r30, r18
 19c:	e7 0f       	add	r30, r23
 19e:	f1 1d       	adc	r31, r1
 1a0:	10 82       	st	Z, r1
				letra=0;
				while(letra<6)
				{
					for(i=0;i<16;i++)//duracion de eve (flash)
					{
						for (k=0;k<8;k++)
 1a2:	7f 5f       	subi	r23, 0xFF	; 255
 1a4:	70 93 48 01 	sts	0x0148, r23
 1a8:	78 30       	cpi	r23, 0x08	; 8
 1aa:	d8 f2       	brcs	.-74     	; 0x162 <main+0xf6>
							PORTB=~eve[letra][k];
							_delay_ms(2);
							PORTD=PORTD>>1;
							copia[k]=0x00;
						}
						PORTD=0x80;
 1ac:	6b b9       	out	0x0b, r22	; 11
			if(letra==3)//si letra es ==2 no hay mensaje[2][x]
			{
				letra=0;
				while(letra<6)
				{
					for(i=0;i<16;i++)//duracion de eve (flash)
 1ae:	80 91 53 01 	lds	r24, 0x0153
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 53 01 	sts	0x0153, r24
 1b8:	80 31       	cpi	r24, 0x10	; 16
 1ba:	80 f2       	brcs	.-96     	; 0x15c <main+0xf0>
							PORTD=PORTD>>1;
							copia[k]=0x00;
						}
						PORTD=0x80;
					}
					letra++;
 1bc:	80 91 51 01 	lds	r24, 0x0151
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 51 01 	sts	0x0151, r24
			indice=0;//regresamos el indice para copiar la nueva letra desde el incio
			letra++;//cambiamos a la siguiente letra
			if(letra==3)//si letra es ==2 no hay mensaje[2][x]
			{
				letra=0;
				while(letra<6)
 1c6:	86 30       	cpi	r24, 0x06	; 6
 1c8:	38 f2       	brcs	.-114    	; 0x158 <main+0xec>
						}
						PORTD=0x80;
					}
					letra++;
				}
				letra=0;
 1ca:	10 92 51 01 	sts	0x0151, r1
 1ce:	6a cf       	rjmp	.-300    	; 0xa4 <main+0x38>

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
